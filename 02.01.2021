#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
#include <list>
#include <map>
#include <set>
#define WAY "c.bmp"
#define PAT "eminem.txt"
#define ARC "Archive.txt"
#define FILE_NUMBER 1

using namespace std;

class Node
{
public:
	Node* parent;
	Node* left;
	Node* right;
	char val;
	int freq;

	Node(Node const& other)
	{
		val = other.val;
		freq = other.freq;
		parent = other.parent;
		left = other.left;
		right = other.right;
	}

	Node() :freq(0), val(0), parent(NULL), left(NULL), right(NULL) { /*cout << "Constructor" << endl;*/ }
	Node(char value, int frequency) : val(value), freq(frequency), parent(NULL), left(NULL), right(NULL) { /*cout << "Constructor" << endl;*/ }
	Node(Node* L, Node* R)
	{
		left = L;
		right = R;
		freq = L->freq + R->freq;
	}
	friend ostream& operator<<(ostream& os, Node& n)
	{
		os << n.val;
		return os;
	}
};

bool operator < (Node const& left, Node const& right) { return left.freq < right.freq; }
bool operator > (Node const& left, Node const& right) { return left.freq > right.freq; }
bool operator == (Node const& left, Node const& right) { return left.freq == right.freq; }

struct Compare
{
	bool operator()(const Node* l, const Node* r) const { return l->freq < r->freq; }
};

class BinaryTree
{
public:
	Node* head;
	BinaryTree() { head = new Node; }

	//Inner Methods

public:
	void BuildTree(list <Node*>& TableSet)
	{
		while (TableSet.size() != 1)
		{
			TableSet.sort(Compare());

			Node* SonL = TableSet.front();
			TableSet.pop_front();
			Node* SonR = TableSet.front();
			TableSet.pop_front();

			Node* parent = new Node(SonL, SonR);
			TableSet.push_front(parent);

		}
		head = TableSet.front();
	}
	void Encode(Node* head, vector<bool>& code, multimap<char, vector<bool>>& table)
	{

		if (head->left != NULL)
		{
			code.push_back(0);
			Encode(head->left, code, table);
		}

		if (head->right != NULL)
		{
			code.push_back(1);
			Encode(head->right, code, table);
		}

		if ((head->left == NULL) && (head->right == NULL))
		{
			table.insert(pair<char, vector<bool>>(head->val, code));
		}
		if (code.size() > 0)
		{
			code.pop_back();
		}
	}
};

void CodeToFile(ofstream& out, vector<char>& str, multimap<char, vector<bool>>& table)
{
	int count = 0; char buf = 0; int Ccounter = 0;
	int Size = str.size();
	while (Ccounter != Size)
	{
		char c = str[Ccounter];
		vector<bool> x = table.find(c)->second;;
		for (int n = 0; n < x.size(); n++)
		{
			buf = buf | x[n] << (7 - count);
			count++;
			if (count == 8)
			{
				count = 0;
				out << buf;
				buf = 0;
			}
		}
		Ccounter++;
	}
	while (count != 8)
	{
		buf = buf | 0 << (7 - count);
		count++;
	}
	out << buf;
}

vector<char> FileToCode(ifstream& in, list <Node*>& TableSet)
{
	string name;
	
	while (true)
	{
		name.push_back(in.get());
		auto format = in.tellg();
		if (in.get() == '.')
		{
			break;
		}
		else
		{
			in.seekg(format);
		}
	}
	name.push_back('.');
	for (int c = 0; c != 3; c++)
	{
		name.push_back(in.get());
	}
	vector<char> s;
	auto stop = in.tellg();
	while (true)
	{
		char ch = in.get();
		if (ch == 'E')
		{
			stop = in.tellg();
			if (in.get() == 'N')
			{
				if (in.get() == 'D')
				{
					break;
				}
			}
			else
			{
				in.seekg(stop);
			}

		}
		s.push_back(ch);
	}
	char sym;
	int freq;
	while (!in.eof())
	{
		sym = in.get();
		if (sym == '|') { break; }
		sym = in.get();
		in >> freq;

		Node* p = new Node(sym, freq);
		TableSet.push_back(p);
	}
	return s;
}

vector<char> FindFile(ifstream& in, list <Node*>& TableSet, int File_Number)
{
	//in.get();	//костыль, который пропускает первые два символа
	//in.get();	//нужно это добавлять если файл кодируется в Unicode
	auto needed_file = in.tellg();

	for (int file_number = 0; file_number != File_Number; file_number++)	//порядковый номер разархивируемого файла в архиве
	{
		needed_file = in.tellg();
		string name;
		while (true)
		{
			name.push_back(in.get());
			auto format = in.tellg();
			if (in.get() == '.')
			{
				break;
			}
			else
			{
				in.seekg(format);
			}
		}
		name.push_back('.');
		for (int c = 0; c != 3; c++)
		{
			name.push_back(in.get());
		}
		//vector<char> s;
		auto stop = in.tellg();
		while (true)
		{
			char ch = in.get();
			if (ch == 'E')
			{
				stop = in.tellg();
				if (in.get() == 'N')
				{
					if (in.get() == 'D')
					{
						break;
					}
				}
				else
				{
					in.seekg(stop);
				}

			}
			//s.push_back(ch);
		}
		char sym;
		int freq;
		while (!in.eof())
		{
			sym = in.get();
			if (sym == '|') {
				break; }
			sym = in.get();
			in >> freq;

			//Node* p = new Node(sym, freq);
			//TableSet.push_back(p);
		}

	}
	in.seekg(needed_file);
	vector<char> Decoded = FileToCode(in, TableSet);
	return Decoded;
}

void DECODE(vector<char>& in, Node* root, ofstream& out)
{
	int c = 0;
	Node* cur = root;
	int count = 0; char byte;
	byte = in[c];
	int length = in.size();
	//string::iterator end = in.begin();

	while (c < length - 1)
	{
		bool b = byte & (1 << (7 - count));
		if (b) cur = cur->right; else cur = cur->left;
		if (cur->left == NULL && cur->right == NULL)
		{
			out << cur->val; cur = root;
		}
		count++;
		if (count == 8)
		{
			c++;
			//end++;
			count = 0; byte = in[c];
		}
	}
}

void FillTheNodes(vector<char>& str, vector<Node>& table)
{
	int WhileCounter = 0;
	char ch;
	int Size = str.size();
	while (WhileCounter != Size) //(!fs.eof())	//последний символ из файла загружается 2 раза
	{
		int tablesize = table.size();
		ch = str[WhileCounter];
		if (tablesize > 0)	//начинаем алгоритм только если в таблице уже есть символы
		{
			int i = 0;
			for (i = 0; i < tablesize; i++)
			{
				if (ch == table[i].val)
				{
					//данный символ уже есть в таблице, увеличиваем количество данных символов в таблице
					table[i].freq++;
					break;
				}

			}
			if (i == tablesize)	//если for дошел до конца и не нашел символа в таблице, то вставляем его
			{
				//данного символа еще нет в таблице, добавляем новое поле в table и записываем туда 1

				table.push_back(Node(ch, 1));   //вставляем элемент со значением ch и freq = 1

				//нужно заменить pushback на insert чтобы сразу получать отсортированный массив
			}
		}
		else
		{
			table.push_back(Node(ch, 1));//действия для первого символа в файле
		}
		//cout << ch << endl;		//всегда выводит последний символ два раза		//строка для отладки
		WhileCounter++;
	}
}

multimap<int, string> ShowFiles(ifstream& in)
{
	bool end_flag = 0; //костыль X (хз как остановить самый большой цикл)
	multimap<int, string> List_Of_Names;
	int file_number = 1;
	//in.get();	//костыль, который пропускает первые два символа
	//in.get();

	while (true)	//цикл не прекращается
	{
		string name;
		while (true)
		{
			if (name == "яяяяяяя") { end_flag = 1; break; }	//костыль X
			name.push_back(in.get());
			auto format = in.tellg();
			if (in.get() == '.') { break; }
			else { in.seekg(format); }
		}
		if (end_flag == 1) { break; }	//костыль X
		name.push_back('.');
		for (int c = 0; c != 3; c++)
		{
			name.push_back(in.get());
		}
		List_Of_Names.insert(pair<int, string>(file_number, name));
		auto stop = in.tellg();
		while (true)
		{
			char ch = in.get();
			if (ch == 'E')
			{
				stop = in.tellg();
				if (in.get() == 'N')
				{
					if (in.get() == 'D') { break; }
				}
				else
				{
					in.seekg(stop);
				}
			}
		}
		char sym;
		int freq;
		while (!in.eof())
		{
			sym = in.get();
			if (sym == '|') { break; }
			sym = in.get();
			in >> freq;
		}
		file_number++;
	}
	return List_Of_Names;
}

void DeleteExtractedFile(string& path, int File_Number)
{
	ifstream in(path, ios::in | ios::binary);
	ofstream buf("buf.txt", ios::out | ios::binary);
	
	//in.get();	//костыль, который пропускает первые два символа
	//in.get();
	auto needed_begin = in.tellg();
	auto needed_end = in.tellg();

	for (int file_number = 0; file_number != File_Number; file_number++)	//порядковый номер разархивируемого файла в архиве
	{
		needed_begin = in.tellg();
		string name;
		while (true)
		{
			name.push_back(in.get());
			auto format = in.tellg();
			if (in.get() == '.')
			{
				break;
			}
			else
			{
				in.seekg(format);
			}
		}
		name.push_back('.');
		for (int c = 0; c != 3; c++)
		{
			name.push_back(in.get());
		}
		auto stop = in.tellg();
		while (true)
		{
			char ch = in.get();
			if (ch == 'E')
			{
				stop = in.tellg();
				if (in.get() == 'N')
				{
					if (in.get() == 'D')
					{
						break;
					}
				}
				else
				{
					in.seekg(stop);
				}

			}
		}
		char sym;
		int freq;
		while (!in.eof())
		{
			sym = in.get();
			if (sym == '|') {
				break;
			}
			sym = in.get();
			in >> freq;
		}
		needed_end = in.tellg();
	}
	//к этому моменту есть указатели на начало и конец участка который нужно исключить
	//далее считываем все символы из исходного файла в буфер кроме тех что между указателями
	in.seekg(0);
	bool flag = 0;
	auto checkpointer = in.tellg();
	//in.get();
	//in.get();
	while (!in.eof())
	{
		auto checkpointer = in.tellg();
		if (checkpointer == needed_begin) {
			flag = 1; }
		else if (checkpointer == needed_end) {
			flag = 0; }
		char sym = in.get();
		if (in.eof()) { break; }
		if (flag == 0) {
			buf << sym; }
	}
	buf.close();
	in.close();
	ofstream original_file(path, ios::out | ios::binary);
	ifstream buffer("buf.txt", ios::in | ios::binary);
	while (!buffer.eof())
	{
		char symbol = buffer.get();
		if (buffer.eof()) {
			break;
		}
		original_file << symbol;
	}
	buffer.close();
	original_file.close();
}


int main(int argc, char* argv[])
{
	string archive = argv[1];
	string command = argv[2];
	//string path = argv[3];

	/*string archive = ARC;
	string command = "show";
	string path = PAT;*/

	if (command == "add")
	{
		string path = argv[3];
		//код под этим комментом добавляет файл в архив
		ifstream fs(path, ios::in | ios::binary);
		vector<char> str;
		while (!fs.eof())
		{
			char InputChar = fs.get();
			str.push_back(InputChar);
		}
		fs.close();

		vector <Node> table;
		FillTheNodes(str, table);

		list <Node*> TableSet;

		for (vector<Node>::iterator itr = table.begin(); itr != table.end(); itr++)
		{
			Node* p = new Node(itr->val, itr->freq);
			TableSet.push_back(p);
		}

		BinaryTree CodeTree;
		CodeTree.BuildTree(TableSet);

		multimap<char, vector<bool>> List_of_words;
		vector<bool> code;
		CodeTree.Encode(CodeTree.head, code, List_of_words);

		ofstream out(archive, ios::app | ios::binary);
		out << path;
		CodeToFile(out, str, List_of_words);
		out << "END";	//символ начала дерева
		for (auto it = table.begin(); it != table.end(); it++)
		{
			out << " " << it->val << it->freq;
		}
		out << "|";
		out.close();
	}
	else if (command == "show")
	{
		ifstream in(archive, ios::in | ios::binary);

		multimap<int, string> List_of_files = ShowFiles(in);
		for (auto it = List_of_files.begin(); it != List_of_files.end(); it++)
		{
			cout << it->second << endl;
		}
		in.close();
	}
	else if (command == "extract")
	{
		string path = argv[3];

		int File_Number = (int)path[0] - 48;
		ifstream in(archive, ios::in | ios::binary);
		multimap<int, string> List_of_files = ShowFiles(in);
		path = List_of_files.find(File_Number)->second;
		in.close();

		in.open(archive, ios::in | ios::binary);
		list<Node*> DecodeTableSet;
		vector<char> Decoded = FindFile(in, DecodeTableSet, File_Number);
		in.close();

		DeleteExtractedFile(archive, File_Number);

		BinaryTree DecodeTree;
		DecodeTree.BuildTree(DecodeTableSet);
		if (argv[4])
		{
			path = argv[4];
		}
		ofstream FinalOutput(path, ios::out | ios::binary);
		DECODE(Decoded, DecodeTree.head, FinalOutput);
		FinalOutput.close();
	}
	else if (command == "create")
	{
		ofstream out(archive);
		out.close();
	}

	system("pause");
	return 0;
}
